#!/usr/bin/expect

# scripts used for auto installation for ShineFS application, and
# should be run by root, since there are some root profile modification
# work at last of the procedure

# the tool will transfer the package files from remote server to local,
# and extract the package files to its directories; the tool will also
# add some shortcut to hitv and root profiles

# add any argument for the command will generate the shortcut to profile

# disable the spawn output
log_user 0

set loadServer "10.0.64.18"
set userName "root"
set password "root"

############ target files ################
set loadPath "/control/ngb4.2/Compile/package"
dict set filesToLoad MDE "$loadPath/MDS/MDE/HITV_MDE.tar"
dict set filesToLoad MDC "$loadPath/MDS/MDC/HITV_MDC.tar"
dict set filesToLoad MASTER "$loadPath/ShineFS/Master/HITV_Master.tar"
dict set filesToLoad SLAVE "$loadPath/ShineFS/Slave/HITV_Slave.tar"
# the ALLlib is required, but it may not in the same place with above
# package, you need to get it from somewhere by yourself, or put it on
# the same server, and provide the path of the package below
# dict set filesToLoad ALLlib "$loadPath/HITV_ALLlib/HITV_ALLlib.tar"
############  END  #######################

set localPath "."
set PROMPT ".*#$"

# scp the remote package file to local
proc scpFileToLocal {url pass local} {
    global PROMPT 
    puts "copying from $url to $local"
    eval spawn -noecho "/usr/bin/scp $url $local"
    set timeout 100
    expect "assword:"
    send "$pass\r"
    expect -re $PROMPT
}

# untar the target package tar file
proc untarPkg {pkg} {
    global PROMPT
    puts "extract $pkg package"
    eval spawn -noecho "tar xvf $pkg"
    expect -re $PROMPT
}

# check whether the targe file is exist
proc checkFileExist {pathName} {
    return [file exist $pathName]
}

# backup file by copy it with another name
proc backupFile {orig target} {
    file copy -force $orig $target
}

# go to package directory, and execute the script files located
# in the package directory, the script should be a shell script
proc executeInstallationScript {pkgDir} {
    # better to go to the directory, and execute the shell script
    # since the script may be take use of the current directory
    puts "go to $pkgDir"
    cd $pkgDir
    set scripts [glob *.sh]
    foreach script $scripts {
        puts "executing $script"
        puts [ exec ./$script ]
    } 
}

# append some alias utils to profile
proc addShortcutToProfile { profilePath content} {
    if {[catch {set profile [open $profilePath a]} errMsg]} {
        puts "fail to open the profile for $profilePath: $errMsg"
        return -1
    }
    puts $profile $content
    close $profile
}

# add some shortcut to hitv and root profile
proc shortcutProfiles {} {
    puts "add some shortcut to hitv and root profile"
    # add some shortcuts to hitv profile, hitv has default to csh
    set hitvHomeDir "/usr/local/fountain/hitv"
    set hitvShortcuts "\n\
setenv LOG \"/var/log/hitv\"\n\
setenv UTILS \"/usr/local/fountain/utils\"\n\
setenv BIN \"/usr/local/fountain/bin\"\n\
setenv LIB \"/usr/local/lib\"\n\
\n\
alias log \"cd \$LOG\"\n\
alias utils \"cd \$UTILS\"\n\
alias bin \"cd \$BIN\"\n\
alias lib \"cd \$LIB\"\n\
alias tailde \"tail -f \$LOG/mde.log\"\n\
alias taildc \"tail -f \$LOG/mdc.log\"\n\
alias tailpe \"tail -f \$LOG/mpe.log\"\n\
"

    if {[ checkFileExist $hitvHomeDir/.cshrc ] == 1} {
        addShortcutToProfile $hitvHomeDir/.cshrc $hitvShortcuts
    }

    # add some shortcuts to root profile, root has default to bash
    set rootHomeDir "/root"
    set rootShortcuts "\n\
export LOG=\"/var/log/hitv\"\n\
export UTILS=\"/usr/local/fountain/utils\"\n\
export BIN=\"/usr/local/fountain/bin\"\n\
export LIB=\"/usr/local/lib\"\n\
\n\
alias log=\"cd \$LOG\"\n\
alias utils=\"cd \$UTILS\"\n\
alias bin=\"cd \$BIN\"\n\
alias lib=\"cd \$LIB\"\n\
alias tailde=\"tail -f \$LOG/mde.log\"\n\
alias taildc=\"tail -f \$LOG/mdc.log\"\n\
alias tailpe=\"tail -f \$LOG/mpe.log\"\n\
"

    if {[ checkFileExist $rootHomeDir/.bashrc ] == 1} {
        addShortcutToProfile $rootHomeDir/.bashrc $rootShortcuts
    }
}

## main start ##

if { $argc > 0 } {
    shortcutProfiles
    return
}

set pkgList {}
# start to load package to local

dict for {pkg path} $filesToLoad {
    set fileName [file tail $path]
    lappend pkgList $fileName
    if {[ checkFileExist "$localPath/$fileName" ] == 1} {
        puts "$fileName exist, copy it to $fileName.bak"
        backupFile $localPath/$fileName $localPath/$fileName.bak
    }
    set url "$userName@$loadServer:$path"
    scpFileToLocal $url $password $localPath
}

# start to untar the received package
foreach pkg $pkgList {
    untarPkg $localPath/$pkg
}

# execute the shell scripts for each package
set curdir [pwd]
foreach pkg $pkgList {
    set pkgDir [ file rootname $pkg ]
    executeInstallationScript $curdir/$pkgDir
}

