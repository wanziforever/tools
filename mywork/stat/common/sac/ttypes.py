#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class out_apiauth:
  """
  Attributes:
   - resultcode
   - subscriberid
   - customerid
   - devid
   - appkey
   - loginname
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'resultcode', None, None, ), # 1
    (2, TType.I32, 'subscriberid', None, None, ), # 2
    (3, TType.I32, 'customerid', None, None, ), # 3
    (4, TType.STRING, 'devid', None, None, ), # 4
    (5, TType.I64, 'appkey', None, None, ), # 5
    (6, TType.STRING, 'loginname', None, None, ), # 6
  )

  def __init__(self, resultcode=None, subscriberid=None, customerid=None, devid=None, appkey=None, loginname=None,):
    self.resultcode = resultcode
    self.subscriberid = subscriberid
    self.customerid = customerid
    self.devid = devid
    self.appkey = appkey
    self.loginname = loginname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.resultcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.subscriberid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.customerid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.devid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.appkey = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.loginname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('out_apiauth')
    if self.resultcode is not None:
      oprot.writeFieldBegin('resultcode', TType.I32, 1)
      oprot.writeI32(self.resultcode)
      oprot.writeFieldEnd()
    if self.subscriberid is not None:
      oprot.writeFieldBegin('subscriberid', TType.I32, 2)
      oprot.writeI32(self.subscriberid)
      oprot.writeFieldEnd()
    if self.customerid is not None:
      oprot.writeFieldBegin('customerid', TType.I32, 3)
      oprot.writeI32(self.customerid)
      oprot.writeFieldEnd()
    if self.devid is not None:
      oprot.writeFieldBegin('devid', TType.STRING, 4)
      oprot.writeString(self.devid)
      oprot.writeFieldEnd()
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.I64, 5)
      oprot.writeI64(self.appkey)
      oprot.writeFieldEnd()
    if self.loginname is not None:
      oprot.writeFieldBegin('loginname', TType.STRING, 6)
      oprot.writeString(self.loginname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class in_storetokeninfo:
  """
  Attributes:
   - customerid
   - devid
   - appkey
   - loginname
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'customerid', None, None, ), # 1
    (2, TType.STRING, 'devid', None, None, ), # 2
    (3, TType.I64, 'appkey', None, None, ), # 3
    (4, TType.STRING, 'loginname', None, None, ), # 4
  )

  def __init__(self, customerid=None, devid=None, appkey=None, loginname=None,):
    self.customerid = customerid
    self.devid = devid
    self.appkey = appkey
    self.loginname = loginname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.customerid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.devid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.appkey = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.loginname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('in_storetokeninfo')
    if self.customerid is not None:
      oprot.writeFieldBegin('customerid', TType.I32, 1)
      oprot.writeI32(self.customerid)
      oprot.writeFieldEnd()
    if self.devid is not None:
      oprot.writeFieldBegin('devid', TType.STRING, 2)
      oprot.writeString(self.devid)
      oprot.writeFieldEnd()
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.I64, 3)
      oprot.writeI64(self.appkey)
      oprot.writeFieldEnd()
    if self.loginname is not None:
      oprot.writeFieldBegin('loginname', TType.STRING, 4)
      oprot.writeString(self.loginname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class in_createtoken:
  """
  Attributes:
   - subcriber_id
   - session_id
   - create_time
   - expired_time
   - client_ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subcriber_id', None, None, ), # 1
    (2, TType.STRING, 'session_id', None, None, ), # 2
    (3, TType.I64, 'create_time', None, None, ), # 3
    (4, TType.I32, 'expired_time', None, None, ), # 4
    (5, TType.STRING, 'client_ip', None, None, ), # 5
  )

  def __init__(self, subcriber_id=None, session_id=None, create_time=None, expired_time=None, client_ip=None,):
    self.subcriber_id = subcriber_id
    self.session_id = session_id
    self.create_time = create_time
    self.expired_time = expired_time
    self.client_ip = client_ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subcriber_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.session_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.create_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.expired_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.client_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('in_createtoken')
    if self.subcriber_id is not None:
      oprot.writeFieldBegin('subcriber_id', TType.I64, 1)
      oprot.writeI64(self.subcriber_id)
      oprot.writeFieldEnd()
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.STRING, 2)
      oprot.writeString(self.session_id)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I64, 3)
      oprot.writeI64(self.create_time)
      oprot.writeFieldEnd()
    if self.expired_time is not None:
      oprot.writeFieldBegin('expired_time', TType.I32, 4)
      oprot.writeI32(self.expired_time)
      oprot.writeFieldEnd()
    if self.client_ip is not None:
      oprot.writeFieldBegin('client_ip', TType.STRING, 5)
      oprot.writeString(self.client_ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class out_createtoken:
  """
  Attributes:
   - resultcode
   - tokeninfo
   - errorcode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'resultcode', None, None, ), # 1
    (2, TType.STRUCT, 'tokeninfo', (in_createtoken, in_createtoken.thrift_spec), None, ), # 2
    (3, TType.I32, 'errorcode', None, None, ), # 3
  )

  def __init__(self, resultcode=None, tokeninfo=None, errorcode=None,):
    self.resultcode = resultcode
    self.tokeninfo = tokeninfo
    self.errorcode = errorcode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.resultcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.tokeninfo = in_createtoken()
          self.tokeninfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.errorcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('out_createtoken')
    if self.resultcode is not None:
      oprot.writeFieldBegin('resultcode', TType.I32, 1)
      oprot.writeI32(self.resultcode)
      oprot.writeFieldEnd()
    if self.tokeninfo is not None:
      oprot.writeFieldBegin('tokeninfo', TType.STRUCT, 2)
      self.tokeninfo.write(oprot)
      oprot.writeFieldEnd()
    if self.errorcode is not None:
      oprot.writeFieldBegin('errorcode', TType.I32, 3)
      oprot.writeI32(self.errorcode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
