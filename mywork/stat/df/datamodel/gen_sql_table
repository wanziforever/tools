#!/usr/bin/env python
# -*- coding: utf-8 -*-

from base import Base
from sqlalchemy import create_engine
import importlib
import os
import re
import sys

sql_file='./create_tables.sql'

def create_sql_folder():
    pass
    
def dump(sql, *multiparams, **params):
    sqls.append(str(sql.compile(dialect=engine.dialect)).strip() + ';\n\n')

def pre():
    #files = os.listdir("./")
    #modules = []
    #for file in files:
    #    if file.endswith(".py") and \
    #       file != "base.py" and file != "schema.py" and \
    #       file != "data_type.py" and file != "__init__.py":
    #        name, ext = os.path.splitext(file)
    #        modules.append(name)
    #        
    #for m in modules:
    #    try:
    #        importlib.import_module(m)
    #    except:
    #        print m, " is not found"
    try:
        importlib.import_module("schema")
    except:
        print "module is not found"
    

def generate_schema():
    create_sql_folder()
    Base.metadata.create_all(engine, checkfirst=False)
    with open(sql_file, 'w') as f:
        f.write('-- generated by sqlalchemy\n\n')
        f.writelines(sqls)

def fixup():
    ''' some fixup for add IF NOT EXISTS for CREATE TABLE '''
    new_file = open("./new_sql", "w")
    old_file = open(sql_file, "r")
    #create_table_name_re = re.compile(r"CREATE TABLE IF NOT EXISTS '{0:1}(.+)'{0:1} {")
    create_table_name_re = re.compile(r"(CREATE TABLE IF NOT EXISTS )(.*)( \()")
    create_index_name_re = re.compile(r"(CREATE INDEX .* ON )(.*)(.*;)")
    for line in old_file.readlines():
        line = line.replace("CREATE TABLE", "CREATE TABLE IF NOT EXISTS")
        m = create_table_name_re.match(line)
        if m:
            #print "create table matched found"
            table_name = m.groups()[1]
            new_table_name = "%s.%s"%(db_name, table_name)
            #print m.groups()[0]+new_table_name+m.groups()[2]
            line = m.groups()[0]+new_table_name+m.groups()[2]
        m = create_index_name_re.match(line)
        if m:
            #print "create index matched found"
            table_name = m.groups()[1]
            new_table_name = "%s.%s"%(db_name, table_name)
            #print m.groups()[0]+new_table_name+m.groups()[2]
            line = m.groups()[0]+new_table_name+m.groups()[2]
        new_file.write(line)
    new_file.close()
    old_file.close()
    os.system("cp -rf ./new_sql "+sql_file)
    os.system("rm -rf ./new_sql")
        
def generate():
    pre()
    generate_schema()
    fixup()
    
engine = create_engine('mysql://', strategy='mock', executor=dump)
sqls = []
db_name="vod" # default to vod
    
if __name__ == '__main__':
    print "Generate the table create SQLs"
    print "  Note: tool should be run under src/df/datamodel/"
    
    if len(sys.argv) != 2:
        print "usage: %s <database>"%sys.argv[0]
        exit(1)

    db_name = sys.argv[1]
    print "database name provided is", db_name
    generate()
    print "Done!"
 
